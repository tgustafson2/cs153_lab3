diff --git a/Makefile b/Makefile
index 2d2b9e4..ba2c242 100644
--- a/Makefile
+++ b/Makefile
@@ -177,6 +177,8 @@ UPROGS=\
 	_zombie\
 	_shm_cnt\
 	_null\
+	_lab3_test\
+	_lab3_test2\
 
 fs.img: mkfs README $(UPROGS)
 	./mkfs fs.img README $(UPROGS)
diff --git a/exec.c b/exec.c
index b40134f..46073a9 100644
--- a/exec.c
+++ b/exec.c
@@ -63,10 +63,9 @@ exec(char *path, char **argv)
   // Allocate two pages at the next page boundary.
   // Make the first inaccessible.  Use the second as the user stack.
   sz = PGROUNDUP(sz);
-  if((sz = allocuvm(pgdir, sz, sz + 2*PGSIZE)) == 0)
+  if((sp = allocuvm(pgdir, KERNBASE - 2*PGSIZE, KERNBASE)) == 0)
     goto bad;
-  clearpteu(pgdir, (char*)(sz - 2*PGSIZE));
-  sp = sz;
+  clearpteu(pgdir, (char*)(KERNBASE - 2*PGSIZE));
 
   // Push argument strings, prepare rest of stack in ustack.
   for(argc = 0; argv[argc]; argc++) {
@@ -99,6 +98,7 @@ exec(char *path, char **argv)
   curproc->sz = sz;
   curproc->tf->eip = elf.entry;  // main
   curproc->tf->esp = sp;
+  curproc->stack_bot = PGROUNDDOWN(KERNBASE-1);
   switchuvm(curproc);
   freevm(oldpgdir);
   return 0;
diff --git a/lab3_test.c b/lab3_test.c
new file mode 100644
index 0000000..fbfde43
--- /dev/null
+++ b/lab3_test.c
@@ -0,0 +1,9 @@
+#include "types.h"
+#include "stat.h"
+#include "user.h"
+
+int main (int argc, char* argv[]){
+    int v = argc;
+    printf(1, "%p\n", &v);
+    exit();
+}
\ No newline at end of file
diff --git a/lab3_test2.c b/lab3_test2.c
new file mode 100644
index 0000000..52555df
--- /dev/null
+++ b/lab3_test2.c
@@ -0,0 +1,31 @@
+#include "types.h"
+#include "user.h"
+
+// Prevent this function from being optimized, which might give it a closed form
+#pragma GCC push_options
+#pragma GCC optimize ("O0")
+static int
+recurse(int n)
+{
+    if(n == 0)
+        return 0;
+    return n + recurse(n-1);
+}
+#pragma GCC pop_options
+
+int
+main(int argc, char *argv[])
+{
+    int n, m;
+
+    if(argc != 2) {
+        printf(1, "Usage: %s levels\n", argv[0]);
+        exit();
+    }
+
+    n = atoi(argv[1]);
+    printf(1, "Lab 3: Recursing %d levels\n", n);
+    m = recurse(n);
+    printf(1, "Lab 3: Yielded a value of %d\n", m);
+    exit();
+}
\ No newline at end of file
diff --git a/proc.h b/proc.h
index 1647114..7231205 100644
--- a/proc.h
+++ b/proc.h
@@ -49,6 +49,8 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  //need something for tracking end of stack as it grows
+  uint stack_bot;
 };
 
 // Process memory is laid out contiguously, low addresses first:
diff --git a/syscall.c b/syscall.c
index 94ef3c9..b2655ea 100644
--- a/syscall.c
+++ b/syscall.c
@@ -17,9 +17,7 @@
 int
 fetchint(uint addr, int *ip)
 {
-  struct proc *curproc = myproc();
-
-  if(addr >= curproc->sz || addr+4 > curproc->sz)
+  if(addr >= KERNBASE || addr+4 > KERNBASE)
     return -1;
   *ip = *(int*)(addr);
   return 0;
@@ -32,12 +30,11 @@ int
 fetchstr(uint addr, char **pp)
 {
   char *s, *ep;
-  struct proc *curproc = myproc();
 
-  if(addr >= curproc->sz)
+  if(addr >= KERNBASE)
     return -1;
   *pp = (char*)addr;
-  ep = (char*)curproc->sz;
+  ep = (char*)(KERNBASE);
   for(s = *pp; s < ep; s++){
     if(*s == 0)
       return s - *pp;
@@ -59,11 +56,10 @@ int
 argptr(int n, char **pp, int size)
 {
   int i;
-  struct proc *curproc = myproc();
  
   if(argint(n, &i) < 0)
     return -1;
-  if(size < 0 || (uint)i >= curproc->sz || (uint)i+size > curproc->sz)
+  if(size < 0 || (uint)i >= KERNBASE || (uint)i+size > KERNBASE )
     return -1;
   *pp = (char*)i;
   return 0;
diff --git a/trap.c b/trap.c
index 41c66eb..6eb6d80 100644
--- a/trap.c
+++ b/trap.c
@@ -77,6 +77,15 @@ trap(struct trapframe *tf)
             cpuid(), tf->cs, tf->eip);
     lapiceoi();
     break;
+  case T_PGFLT:
+    if(tf->esp >= myproc()->stack_bot - PGSIZE && tf->esp < myproc()->stack_bot){
+      deallocuvm(myproc()->pgdir, myproc()->stack_bot - 1 , myproc()->stack_bot - PGSIZE);
+      allocuvm(myproc()->pgdir, myproc()->stack_bot - 2*PGSIZE, myproc()->stack_bot - 1);
+      myproc()->stack_bot -= PGSIZE;
+      clearpteu(myproc()->pgdir, (char*)(myproc()->stack_bot - PGSIZE));
+      cprintf("Stack size increased by 1.\n");
+      break;
+    }
 
   //PAGEBREAK: 13
   default:
diff --git a/vm.c b/vm.c
index f623aa3..f0c02b9 100644
--- a/vm.c
+++ b/vm.c
@@ -224,7 +224,7 @@ allocuvm(pde_t *pgdir, uint oldsz, uint newsz)
   char *mem;
   uint a;
 
-  if(newsz >= KERNBASE)
+  if(newsz > KERNBASE)
     return 0;
   if(newsz < oldsz)
     return oldsz;
@@ -335,6 +335,21 @@ copyuvm(pde_t *pgdir, uint sz)
     if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0)
       goto bad;
   }
+
+  for(i = KERNBASE - 2*PGSIZE; i < KERNBASE; i += PGSIZE){
+    if((pte = walkpgdir(pgdir, (void *) i, 0)) == 0)
+      panic("copyuvm: pte should exist");
+    if(!(*pte & PTE_P))
+      panic("copyuvm: page not present");
+    pa = PTE_ADDR(*pte);
+    flags = PTE_FLAGS(*pte);
+    if((mem = kalloc()) == 0)
+      goto bad;
+    memmove(mem, (char*)P2V(pa), PGSIZE);
+    if(mappages(d, (void*)i, PGSIZE, V2P(mem), flags) < 0)
+      goto bad;
+  }
+
   return d;
 
 bad:
